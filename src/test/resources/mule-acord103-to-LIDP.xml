<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:wsc="http://www.mulesoft.org/schema/mule/wsc" xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/wsc http://www.mulesoft.org/schema/mule/wsc/current/mule-wsc.xsd">


     <flow name="policies-mapACORD103ToLIDPPolicy-papi-impl" doc:id="d51a2d31-4244-4a39-bbb9-e25034936d1d" >
		<logger level="INFO" doc:name="Initating policies-mapACORD103ToLIDPPolicy-papi" doc:id="ef178eff-3686-4ef5-8324-1b71bf2c6b5e" 
		category="com.pekininsurance-policies-mapACORD103ToLIDPPolicy-papi-impl" 
		message='Initating policies-mapACORD103ToLIDPPolicy-papi : #[import maskSensitiveDataXML from masking output application/xml --- maskSensitiveDataXML(payload, ["GovtID"])]'/>                                

		<ee:transform doc:name="RelatedObjectIDList Transform Message" doc:id="2676b273-4b55-4436-97a8-633ba050b9f6" >
          <ee:variables >
              <ee:set-variable variableName="relatedObjectIDList" ><![CDATA[%dw 2.0
              output application/json
              ---
              Relation: payload.TXLife.TXLifeRequest.OLifE.*Relation map {
                  RelatedObjectID: $.@RelatedObjectID,
                  id: $.@id,
                  RelationRoleCodeTC: $.RelationRoleCode.@tc
              }            
              ]]></ee:set-variable>
              <ee:set-variable variableName="partyList" ><![CDATA[%dw 2.0
              output application/json
              ---
              Party : payload.TXLife.TXLifeRequest.OLifE.*Party map (partyObject, partyIndex) -> {
                  party_id: partyObject.@id,
                  relation : payload.TXLife.TXLifeRequest.OLifE.*Relation filter ($.@RelatedObjectID == partyObject.@id) map $.RelationRoleCode.@tc,
                  lifePart: payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.Life.*Coverage.*LifeParticipant filter ($.@PartyID == partyObject.@id) map $.LifeParticipantRoleCode.@tc
              }]]></ee:set-variable>
          </ee:variables>
       </ee:transform>
       
       <ee:transform doc:name="Initialize Variables Transform Message" doc:id="6c7b8588-5e6c-42d1-a7a3-729a7b41da7f" > 
	      <ee:variables >
	          <ee:set-variable variableName="uniqueRelatedObjectIDList" ><![CDATA[%dw 2.0
	          output application/java
	          ---
	          [] as Array	
              ]]></ee:set-variable>
              <ee:set-variable variableName="newClientList" ><![CDATA[%dw 2.0
              output application/java	
	          ---	
	          [] as Array	
              ]]></ee:set-variable>
              <ee:set-variable variableName="uniqueRelatedExistingClientObjectIDList" ><![CDATA[%dw 2.0
	          output application/java
	          ---
	          [] as Array	
              ]]></ee:set-variable>
              <ee:set-variable variableName="existingClientList" ><![CDATA[%dw 2.0
              output application/java	
	          ---	
	          [] as Array	
              ]]></ee:set-variable>
              <ee:set-variable variableName="origPayload" ><![CDATA[%dw 2.0
              output application/xml
	          ---	
	          payload	
	          ]]></ee:set-variable>	
	      </ee:variables>
		</ee:transform>
		<foreach doc:name="Relation For Each - New Client" doc:id="5ae2c182-77f3-495d-b2fe-bfbef90805f5" collection="#[vars.relatedObjectIDList.Relation]" >
			<choice doc:name="New/Exisiting Relation Choice" doc:id="78ba6af8-44f8-446f-bf32-ff18ed29b94f" >				
				<when expression="#[vars.uniqueRelatedObjectIDList contains(payload.RelatedObjectID)]">
					<!-- <logger level="INFO" doc:name="Logger" doc:id="dd773de4-8ddf-4c10-9ed9-718ba039410b" message="Update Exisiting client : #[payload] and #[vars.uniqueRelatedObjectIDList]"/>
					<logger level="INFO" doc:name="Logger" doc:id="030723e1-e0bf-43f8-bc7f-7c58bd5896ba" message="list : #[vars.newClientList]"/> -->
					<ee:transform doc:name="Exiting Relation Transform Message" doc:id="c711f84d-42fb-4a36-85ef-08e52ea7fe5f" >
						<ee:variables >
							<ee:set-variable variableName="newClientList" ><![CDATA[%dw 2.0
							output application/json skipNullOn="everywhere"
							fun validateNewClient(relationObject) = 
										 if (
												(relationObject.@RelatedObjectID == payload.RelatedObjectID )	
												and
												(relationObject.@id == payload.id )	
												and
												( (relationObject.RelationRoleCode.@tc == "32" ) or
												  (relationObject.RelationRoleCode.@tc == "189" ) or
												  (relationObject.RelationRoleCode.@tc == "8" ) or
												  (relationObject.RelationRoleCode.@tc == "31" ) or
												  (relationObject.RelationRoleCode.@tc == "1" ) or
												  (relationObject.RelationRoleCode.@tc == "2" ) or
												  (relationObject.RelationRoleCode.@tc == "34" ) or
												  (relationObject.RelationRoleCode.@tc == "127" ) or
												  (relationObject.RelationRoleCode.@tc == "36" )  )
												and
												(relationObject.RelatedObjectType.@tc == "6" )	
												and 
												(
												if (relationObject.RelationRoleCode.@tc == "8" or 
														relationObject.RelationRoleCode.@tc == "31" or 
														relationObject.RelationRoleCode.@tc == "34") 
															if (((vars.partyList.Party filter ( ($.party_id == relationObject.@RelatedObjectID) ) map ($.relation contains("37")))[0]))
																"false"
															else "true"
												else "true" 
												)								
											)  "true" 
										else  "false"
							---
							vars.newClientList  map {			
								NewClient : if (payload.RelatedObjectID == $.NewClient.tempId){
									tempId: $.NewClient.tempId,
									NewName: {
										RelationshipArray : $.NewClient.NewName.RelationshipArray mapObject {
											($$): $
										} ++ {
											(vars.origPayload.TXLife.TXLifeRequest.OLifE.*Relation filter validateNewClient($) map (relationObject, relationIndex) -> {	
												Relationship: 	  if (relationObject.RelationRoleCode.@tc == "32") "i"
													  else if (relationObject.RelationRoleCode.@tc == "189") "i"
													  else if (relationObject.RelationRoleCode.@tc == "8") "o"
													  else if (relationObject.RelationRoleCode.@tc == "31") "p"
													  else if (relationObject.RelationRoleCode.@tc == "1") "s"
													  else if (relationObject.RelationRoleCode.@tc == "2") "c"
													  else if (relationObject.RelationRoleCode.@tc == "34") "b"
													  else if (relationObject.RelationRoleCode.@tc == "127") "m"
													  else if (relationObject.RelationRoleCode.@tc == "36") "r"
													  else null,
												Relationship: 	  if ((relationObject.RelationRoleCode.@tc == "1") and ((vars.partyList.Party filter ($.party_id == relationObject.@RelatedObjectID))[0].lifePart contains "5")) "i"
													  else if ((relationObject.RelationRoleCode.@tc == "2") and ((vars.partyList.Party filter ($.party_id == relationObject.@RelatedObjectID))[0].lifePart contains "3")) "i"
													  else null,  
											})									
										},
										SituationCode: $.NewClient.NewName.SituationCode,
										ClientNumber: $.NewClient.NewName.ClientNumber,
										PolicyName: $.NewClient.NewName.PolicyName													
									},
									NewAddressArray: $.NewClient.NewAddressArray,
									NewBilling: $.NewClient.NewBilling
								}
								else $.NewClient
							}
							]]></ee:set-variable>
						</ee:variables>
					</ee:transform>
					<ee:transform doc:name="indexOfPartyWithJointInsured" doc:id="05e615d8-2be9-40ed-b895-c67874ab46b4" >
						<ee:message />
						<ee:variables >
							<ee:set-variable variableName="indexOfPartyWithJointInsured" ><![CDATA[%dw 2.0
output application/java
---
if (payload.RelationRoleCodeTC == "189") (sizeOf(vars.newClientList) - 1) else vars.indexOfPartyWithJointInsured]]></ee:set-variable>
						</ee:variables>
					</ee:transform>
					<!-- <logger level="INFO" doc:name="Logger" doc:id="94f4bc15-db0e-49b5-a829-a86a3e86a3b6" message="Testing newClientList: #[vars.newClientList]"/> -->
				</when>
				<otherwise>
					<!-- <logger level="INFO" doc:name="Logger" doc:id="2ec3fd6e-bddc-41a0-bd46-ad86701d60f0" message="Create New client : #[payload]"/> -->
					
					<ee:transform doc:name="New Relation Initialize Transform Message" doc:id="2c7ecbe1-4260-44e1-8937-1f024f188160" >
						<ee:variables >
							<ee:set-variable variableName="uniqueRelatedObjectIDList" ><![CDATA[%dw 2.0
							output application/java
							---
							flatten(vars.*uniqueRelatedObjectIDList ++ [payload.RelatedObjectID])
							]]></ee:set-variable>
							<ee:set-variable variableName="currentRelatedObjectID" ><![CDATA[%dw 2.0
							output application/java
							---
							payload
							]]></ee:set-variable>													
						</ee:variables>
					</ee:transform>
					<!-- <logger level="INFO" doc:name="Logger" doc:id="40eae679-5fb7-4c74-ae75-375928de4af1" message="uniqueRelatedObjectIDList : #[vars.uniqueRelatedObjectIDList]"/>
					<logger level="INFO" doc:name="Logger" doc:id="315e2fbe-5789-422f-9492-c45bd757aca2" message="currentRelatedObjectID : #[vars.currentRelatedObjectID]"/> -->
					<ee:transform doc:name="New Relation Transform Message" doc:id="69ebed8f-8624-4c1f-b423-7cf39e342bb1" >			
						<ee:variables >
							<ee:set-variable variableName="newClient" ><![CDATA[%dw 2.0
							output application/xml skipNullOn="everywhere"
							ns soap http://www.w3.org/2003/05/soap-envelope
							ns xsd http://AddPolicy/xsd
							
							fun validateNewClient(relationObject) = 
										 if (
												(relationObject.@RelatedObjectID == vars.currentRelatedObjectID.RelatedObjectID )	
												and
												(relationObject.@id == vars.currentRelatedObjectID.id )	
												and
												( (relationObject.RelationRoleCode.@tc == "32" ) or
												  (relationObject.RelationRoleCode.@tc == "189" ) or
												  (relationObject.RelationRoleCode.@tc == "8" ) or
												  (relationObject.RelationRoleCode.@tc == "31" ) or
												  (relationObject.RelationRoleCode.@tc == "1" ) or
												  (relationObject.RelationRoleCode.@tc == "2" ) or
												  (relationObject.RelationRoleCode.@tc == "34" ) or
												  (relationObject.RelationRoleCode.@tc == "127" ) or
												  (relationObject.RelationRoleCode.@tc == "36" )  )
												and
												(relationObject.RelatedObjectType.@tc == "6" )		
												and 
												(
												if (relationObject.RelationRoleCode.@tc == "8" or 
														relationObject.RelationRoleCode.@tc == "31" or 
														relationObject.RelationRoleCode.@tc == "34") 
															if (((vars.partyList.Party filter ( ($.party_id == relationObject.@RelatedObjectID) ) map ($.relation contains("37")))[0]))
																"false"
															else "true"
												else "true" 
												) 						
											)  "true" 
										else  "false"
							
							fun validateAllRelatedObjectID(relationObject) = 
										if (
												(relationObject.@RelatedObjectID == vars.currentRelatedObjectID.RelatedObjectID )												
												and
												( relationObject.RelationRoleCode.@tc == "31" )				
												and 
												not ((vars.partyList.Party filter ( ($.party_id == relationObject.@RelatedObjectID) ) map ($.relation contains("37")))[0])															
											)  "true" 
										else  "false"
							
							fun getMaritalStatus(maritalStatus) = maritalStatus match {
													case "Married" -> "Married"
													case "Single" -> "Single"
													case "Divorced" -> "Divorced"
													case "Widowed" -> "Widowed"
													else -> "Other" 										
												}
						
							fun validateAddress(addressObject) = 
										 if (
												(addressObject.AddressTypeCode.@tc == "1" ) or
												(addressObject.AddressTypeCode.@tc == "17" ) or
												(addressObject.AddressTypeCode.@tc == "26" )																	
											)  "true" 
										else  "false"
							
							fun zipFormat(number: String) = number[0 to 4] ++ "-" ++ number [5 to 8]
							
							fun validatePhone(addressObject,phoneObject) = 
										if (
												addressObject.AddressTypeCode.@tc == "1" and
												phoneObject.PhoneTypeCode.@tc == "26" 																	
											)  "true"
										else if (
												addressObject.AddressTypeCode.@tc == "17" and
												phoneObject.PhoneTypeCode.@tc == "26" 																	
											)  "true"
										else if (
												addressObject.AddressTypeCode.@tc == "26" and
												phoneObject.PhoneTypeCode.@tc == "26" 																	
											)  "true"	 
										else  "false"
										
							fun getPaymentMode(paymentModeTC) = 
										 if (paymentModeTC == "1" or vars.origPayload.TXLife.TXLifeRequest.OLifE.Holding.Policy.PaymentMethod.@tc == "1")  "AN"
										 else if (paymentModeTC == "2")  "SA"
										 else if (paymentModeTC == "3")  "QU"
										 else if (paymentModeTC == "4")  "MO"
										 else if (paymentModeTC == "9")  "SP"
										 else  ""
							
							fun getPaymentMethod(paymentMethodTC) = 
										 if (paymentMethodTC == "7")  "J"
										 else if (paymentMethodTC == "1" or paymentMethodTC == "2" or paymentMethodTC == "5")  "0"
										 else  ""
																
							fun getAccountType(accountTypeTC) = 
										 if (accountTypeTC == "2")  "1"
										 else if (accountTypeTC == "1")  "2"
										 else  ""	
								
							fun getUseCode (dueDay, effday) = 
										 if (dueDay == "1" and ( effday >=1 and effday <=21) )  "1"
										 else if (dueDay == "1" and ( effday >=22 ) )  "4"
										 else if (dueDay == "2" and ( effday >=1 and effday <=22) )  "1"
										 else if (dueDay == "2" and ( effday >=23 ) )  "4"
										 else if (dueDay == "3" and ( effday >=1 and effday <=23) )  "1"
										 else if (dueDay == "3" and ( effday >=24 ) )  "4"
										 else if (dueDay == "4" and ( effday >=1 and effday <=24) )  "1"
										 else if (dueDay == "4" and ( effday >=25 ) )  "4"
										 else if (dueDay == "5" and ( effday >=1 and effday <=25) )  "1"
										 else if (dueDay == "5" and ( effday >=26 ) )  "4"
										 else if (dueDay == "6" and ( effday >=1 and effday <=26) )  "1"
										 else if (dueDay == "6" and ( effday >=27 ) )  "4"
										 else if (dueDay == "7" and ( effday >=1 and effday <=27) )  "1"
										 else if (dueDay == "7" and ( effday >=28 ) )  "4"
										 else if (dueDay == "8" and ( effday >=1 and effday <=28) )  "1"
										 else if (dueDay == "8" and ( effday >=29 ) )  "4"
										 else if (dueDay == "9" and ( effday >=1 and effday <=29) )  "1"
										 else if (dueDay == "9" and ( effday >=30 ) )  "4"
										 else if (dueDay == "10" and ( effday >=1 ) )  "1"
										 else if (dueDay == "11" and ( effday >=1 ) )  "1"
										 else if (dueDay == "12" and ( effday ==1 ) )  "2"
										 else if (dueDay == "12" and ( effday >=2 ) )  "1"
										 else if (dueDay == "13" and ( effday >=1 and effday <=2) )  "2"
										 else if (dueDay == "13" and ( effday >=3 ) )  "1"
										 else if (dueDay == "14" and ( effday >=1 and effday <=3) )  "2"
										 else if (dueDay == "14" and ( effday >=4 ) )  "1"
										 else if (dueDay == "15" and ( effday >=1 and effday <=4) )  "2"
										 else if (dueDay == "15" and ( effday >=5 ) )  "1"
										 else if (dueDay == "16" and ( effday >=1 and effday <=5) )  "2"
										 else if (dueDay == "16" and ( effday >=6 ) )  "1"
										 else if (dueDay == "17" and ( effday >=1 and effday <=6) )  "2"
										 else if (dueDay == "17" and ( effday >=7 ) )  "1"
										 else if (dueDay == "18" and ( effday >=1 and effday <=7) )  "2"
										 else if (dueDay == "18" and ( effday >=8 ) )  "1"
										 else if (dueDay == "19" and ( effday >=1 and effday <=8) )  "2"
										 else if (dueDay == "19" and ( effday >=9 ) )  "1"
										 else if (dueDay == "20" and ( effday >=1 and effday <=9) )  "2"
										 else if (dueDay == "20" and ( effday >=10 ) )  "1"
										 else if (dueDay == "21" and ( effday >=1 and effday <=10) )  "2"
										 else if (dueDay == "21" and ( effday >=11 ) )  "1"
										 else if (dueDay == "22" and ( effday >=1 and effday <=11) )  "2"
										 else if (dueDay == "22" and ( effday >=12 ) )  "1"
										 else if (dueDay == "23" and ( effday >=1 and effday <=12) )  "2"
										 else if (dueDay == "23" and ( effday >=13 ) )  "1"
										 else if (dueDay == "24" and ( effday >=1 and effday <=13) )  "2"
										 else if (dueDay == "24" and ( effday >=14 ) )  "1"
										 else if (dueDay == "25" and ( effday >=1 and effday <=14) )  "2"
										 else if (dueDay == "25" and ( effday >=15 ) )  "1"
										 else if (dueDay == "26" and ( effday >=1 and effday <=15) )  "2"
										 else if (dueDay == "26" and ( effday >=16 ) )  "1"
										 else if (dueDay == "27" and ( effday >=1 and effday <=16) )  "2"
										 else if (dueDay == "27" and ( effday >=17 ) )  "1"
										 else if (dueDay == "28" and ( effday >=1 and effday <=17) )  "2"
										 else if (dueDay == "28" and ( effday >=18 ) )  "1"
										 else  ""
							fun getDueDayUsingWeekNDay(weekNumber, dayOfWeek)= ( 7 * (weekNumber - 1) + 
										(lower(dayOfWeek) match {
										case "sunday" -> 1
										case "monday" -> 2
										case "tuesday" -> 3
										case "wednesday" -> 4
										case "thursday" -> 5
										case "friday" -> 6
										case "saturday" -> 7})
							)
							---
							xmlDummyParent: {
							(vars.origPayload.TXLife.TXLifeRequest.OLifE.*Relation filter validateNewClient($) map (relationObject, relationIndex) -> {								
								xsd#NewClient: {
									tempId : relationObject.@RelatedObjectID,
									xsd#NewName: {										
										xsd#RelationshipArray: {
											xsd#Relationship: if (relationObject.RelationRoleCode.@tc == "32") "i"
															  else if (relationObject.RelationRoleCode.@tc == "189") "i"
															  else if (relationObject.RelationRoleCode.@tc == "8") "o"
															  else if (relationObject.RelationRoleCode.@tc == "31") "p"
															  else if (relationObject.RelationRoleCode.@tc == "1") "s"
															  else if (relationObject.RelationRoleCode.@tc == "2") "c"
															  else if (relationObject.RelationRoleCode.@tc == "34") "b"
															  else if (relationObject.RelationRoleCode.@tc == "127") "m"
															  else if (relationObject.RelationRoleCode.@tc == "36") "r"
															  else null,
											xsd#Relationship: 	  if ((relationObject.RelationRoleCode.@tc == "1") and ((vars.partyList.Party filter ($.party_id == relationObject.@RelatedObjectID))[0].lifePart contains "5")) "i"
													  else if ((relationObject.RelationRoleCode.@tc == "2") and ((vars.partyList.Party filter ($.party_id == relationObject.@RelatedObjectID))[0].lifePart contains "3")) "i"
													  else null,			  
										},
										xsd#SituationCode: "01",
										(vars.origPayload.TXLife.TXLifeRequest.OLifE.*Party filter ($.@id == relationObject.@RelatedObjectID) map (partyObject, partyIndex) -> {
											xsd#ClientNumber: if(partyObject.PartySysKey != null and (partyObject.PartySysKey as Number) > 0) partyObject.PartySysKey	else null,
											xsd#PolicyName: {											
												xsd#SexCode: if (partyObject.Person.Gender.@tc == "1") "M"
															else if (partyObject.Person.Gender.@tc == "2") "F"
															else if (partyObject.Person.Gender.@tc == "0") "U"
															else "U",
												xsd#LastName: partyObject.Person.LastName default null,
												xsd#FirstName: partyObject.Person.FirstName default "",
												xsd#MiddleName: partyObject.Person.MiddleName default null,
												xsd#NamePrefix: partyObject.Person.Prefix default null,
												xsd#NameSuffix: partyObject.Person.Suffix default null,
												xsd#Birthdate: partyObject.Person.BirthDate default "",
												(partyObject.*GovtIDInfo filter (($.GovtIDTC.@tc == "1") or ($.GovtIDTC.@tc == "8") or ($.GovtIDTC.@tc == "2")) map {
													xsd#SsiOrEmpNo: if ($.GovtIDTC.@tc == "1" and $.GovtID != null) ( $.GovtID[0 to 2] ++ "-" ++ $.GovtID[3 to 4] ++ "-" ++ $.GovtID[5 to 8]) 
																else if ($.GovtIDTC.@tc == "8" and $.GovtID != null) ( $.GovtID[0 to 1] ++ "-" ++ $.GovtID[2 to 8])
																else if ($.GovtIDTC.@tc == "2" and $.GovtID != null) ( $.GovtID[0 to 1] ++ "-" ++ $.GovtID[2 to 8])
																else ""
												}),
												xsd#BirthPlace: partyObject.Person.BirthJurisdiction default null,
												xsd#MaritalStatus: if (partyObject.Person.MarStat != null) getMaritalStatus(partyObject.Person.MarStat) else null,
												xsd#Nickname:  partyObject.*GovtIDInfo filter ($.GovtIDTC.@tc == "38" and $.GovtID != null) map ($.GovtID) default null,
											}
										})	
									},
									xsd#NewAddressArray: {
										(vars.origPayload.TXLife.TXLifeRequest.OLifE.*Party filter ($.@id == relationObject.@RelatedObjectID) map (partyObject, partyIndex) -> {
											(partyObject.*Address filter validateAddress($) map (addressObject, addressIndex) -> {												
												xsd#NewAddress: {													
													xsd#AddressType: if (addressObject.AddressTypeCode.@tc == "1") "H"
																else if (addressObject.AddressTypeCode.@tc == "17") "O"
																else if (addressObject.AddressTypeCode.@tc == "26") "B"
																else "",
													xsd#AddressLinesArray: {
														xsd#AddressLines : addressObject.Line1 default "",
														xsd#AddressLines : addressObject.Line2 default "",
														xsd#AddressLines : addressObject.Line3 default "",
														xsd#AddressLines : addressObject.Line4 default ""
													},
													xsd#City: addressObject.City default null,
													xsd#State: addressObject.AddressState default null,
													xsd#ZipCode: if(sizeOf(addressObject.Zip) == 9) zipFormat(addressObject.Zip)
																 else addressObject.Zip 
																 default null,
														(partyObject.*Phone filter validatePhone(addressObject,$)  map (phoneObject, phoneIndex) -> {
														xsd#PhoneNumber: ( phoneObject.DialNumber[0 to 2] ++ "-" ++ phoneObject.DialNumber[3 to 5] ++ "-" ++ phoneObject.DialNumber[6 to 9]) default null,
													})	 
												}
											})	
										})
									},
									(vars.origPayload.TXLife.TXLifeRequest.OLifE.*Relation filter validateAllRelatedObjectID($) map (innerRelationObject, innerRelationIndex) -> {	
										xsd#NewBilling: {	
															xsd#BillingForm: getPaymentMethod(vars.origPayload.TXLife.TXLifeRequest.OLifE.Holding.Policy.PaymentMethod.@tc) default null, 
															xsd#BillingMode: getPaymentMode(vars.origPayload.TXLife.TXLifeRequest.OLifE.Holding.Policy.PaymentMode.@tc) default null,
															xsd#DueDay: if (vars.origPayload.TXLife.TXLifeRequest.OLifE.Holding.Policy.PaymentDraftWeek != null and vars.origPayload.TXLife.TXLifeRequest.OLifE.Holding.Policy.PaymentDraftDayOfWeek != null) getDueDayUsingWeekNDay(vars.origPayload.TXLife.TXLifeRequest.OLifE.Holding.Policy.PaymentDraftWeek,vars.origPayload.TXLife.TXLifeRequest.OLifE.Holding.Policy.PaymentDraftDayOfWeek) else if (vars.origPayload.TXLife.TXLifeRequest.OLifE.Holding.Policy.PaymentDraftDay != null and vars.origPayload.TXLife.TXLifeRequest.OLifE.Holding.Policy.PaymentDraftDay >=1 and  vars.origPayload.TXLife.TXLifeRequest.OLifE.Holding.Policy.PaymentDraftDay <=28) vars.origPayload.TXLife.TXLifeRequest.OLifE.Holding.Policy.PaymentDraftDay else null,
															xsd#UseCode: if (vars.origPayload.TXLife.TXLifeRequest.OLifE.Holding.Policy.PaymentDraftWeek != null and vars.origPayload.TXLife.TXLifeRequest.OLifE.Holding.Policy.PaymentDraftDayOfWeek != null) "W" else getUseCode(vars.origPayload.TXLife.TXLifeRequest.OLifE.Holding.Policy.PaymentDraftDay, vars.origPayload.TXLife.TXLifeRequest.OLifE.Holding.Policy.EffDate[8 to 9] as Number) default null,
															xsd#BaBranch: vars.origPayload.TXLife.TXLifeRequest.OLifE.Holding.Banking.BankBranchName default "",
															xsd#AccountType: getAccountType(vars.origPayload.TXLife.TXLifeRequest.OLifE.Holding.Banking.BankAcctType.@tc) default "",
															xsd#AccountNumber: vars.origPayload.TXLife.TXLifeRequest.OLifE.Holding.Banking.AccountNumber default "",
															xsd#SignatureLineArray: {
																xsd#SignatureLine: vars.origPayload.TXLife.TXLifeRequest.OLifE.Holding.Banking.AuthorizedSignatory.SignatoryName default "",
															}
														} 
														
									})					
									} 	
								} 	
								)}]]></ee:set-variable>
							</ee:variables>
					</ee:transform>
					<!-- <logger level="INFO" doc:name="Logger" doc:id="cedb41d7-3b5b-45a7-8f9c-a9bb09c40417" message="Created New client : #[vars.newClient]"/> -->
					
					<ee:transform doc:name="Add Relation Transform Message" doc:id="9474c066-d841-4490-94e6-4bc35d178f66" >
						<ee:variables >
							<ee:set-variable variableName="newClientList" ><![CDATA[%dw 2.0
							output application/json
							---
							if (vars.newClient.xmlDummyParent == null) 
								vars.newClientList 
							else
								flatten(vars.*newClientList ++ [vars.newClient.xmlDummyParent])	
							]]></ee:set-variable>											
						</ee:variables>
					</ee:transform>
					<ee:transform doc:name="indexOfPartyWithJointInsured" doc:id="12637aa6-b8f8-4834-9e52-d26f85dda773" >
						<ee:message >
						</ee:message>
						<ee:variables >
							<ee:set-variable variableName="indexOfPartyWithJointInsured" ><![CDATA[%dw 2.0
output application/java
---
if (payload.RelationRoleCodeTC == "189") (sizeOf(vars.newClientList) - 1) else vars.indexOfPartyWithJointInsured]]></ee:set-variable>
						</ee:variables>
					</ee:transform>
					<!-- <logger level="INFO" doc:name="Logger" doc:id="bf7c42e9-5176-40bd-8860-43561d2d3b0d" message="newClientList : #[vars.newClientList]"/> -->
				</otherwise>
			</choice>
		</foreach>
		
		
		
		<foreach doc:name="Relation For Each - Existing Client" doc:id="caf771ee-096e-40c7-960b-50b749b0fb73" collection="#[vars.relatedObjectIDList.Relation]" >
			<choice doc:name="New/Exisiting Relation Choice" doc:id="ecc7dbfe-608f-4d0c-9b42-09088c345c30" >				
				<when expression="#[vars.uniqueRelatedExistingClientObjectIDList contains(payload.RelatedObjectID)]">
				<!--	<logger level="INFO" doc:name="Logger" doc:id="7e6f64f6-a91e-45f9-b038-c61c5d558aee" message="uniqueRelatedExistingClientObjectIDList : Update Exisiting client : #[payload] and #[vars.uniqueRelatedExistingClientObjectIDList]"/> --> 
					<ee:transform doc:name="Exiting Relation Transform Message" doc:id="1ef3faf2-8ce1-4309-b60b-d67fe3ad2d7d" >
						<ee:variables >
							<ee:set-variable variableName="existingClientList" ><![CDATA[%dw 2.0
							output application/json skipNullOn="everywhere"
							fun validateExistingClient(relationObject) = 
										 if (
												(relationObject.@RelatedObjectID == payload.RelatedObjectID )	
												and
												(relationObject.@id == payload.id )	
												and
												(relationObject.RelatedObjectType.@tc == "6" )		
												and 
												(
												if (relationObject.RelationRoleCode.@tc == "8" or 
														relationObject.RelationRoleCode.@tc == "31" or 
														relationObject.RelationRoleCode.@tc == "34") 
															if (((vars.partyList.Party filter ( ($.party_id == relationObject.@RelatedObjectID) ) map ($.relation contains("37")))[0]))
																"true"
															else "false"
												else "false" 
												) 						
											)  "true" 
										else  "false"
										
							---
							vars.existingClientList  map {			
								ExistingClient : if (payload.RelatedObjectID == $.ExistingClient.tempId){
									tempId: $.ExistingClient.tempId,
									ExistingName: {
										RelationshipArray : $.ExistingClient.ExistingName.RelationshipArray mapObject {
											($$): $
										} ++ {
											(vars.origPayload.TXLife.TXLifeRequest.OLifE.*Relation filter validateExistingClient($) map (relationObject, relationIndex) -> {	
												Relationship: 	  if (relationObject.RelationRoleCode.@tc == "32") "i"
													  else if (relationObject.RelationRoleCode.@tc == "189") "i"
													  else if (relationObject.RelationRoleCode.@tc == "8") "o"
													  else if (relationObject.RelationRoleCode.@tc == "31") "p"
													  else if (relationObject.RelationRoleCode.@tc == "1") "s"
													  else if (relationObject.RelationRoleCode.@tc == "2") "c"
													  else if (relationObject.RelationRoleCode.@tc == "34") "b"
													  else if (relationObject.RelationRoleCode.@tc == "127") "m"
													  else if (relationObject.RelationRoleCode.@tc == "36") "r"
													  else null,
												Relationship: 	  if ((relationObject.RelationRoleCode.@tc == "1") and ((vars.partyList.Party filter ($.party_id == relationObject.@RelatedObjectID))[0].lifePart contains "5")) "i"
													  else if ((relationObject.RelationRoleCode.@tc == "2") and ((vars.partyList.Party filter ($.party_id == relationObject.@RelatedObjectID))[0].lifePart contains "3")) "i"
													  else null,  
											})									
										},
										SituationCode: $.ExistingClient.ExistingName.SituationCode,
										ClientNumber: $.ExistingClient.ExistingName.ClientNumber,
										LastName : 	$.ExistingClient.ExistingName.LastName,
										FirstName : 	$.ExistingClient.ExistingName.FirstName,
										SexCode : $.ExistingClient.ExistingName.SexCode,
										SsiOrEmpNo : $.ExistingClient.ExistingName.SsiOrEmpNo												
									}
								}
								else $.ExistingClient
							}
							]]></ee:set-variable>
						</ee:variables>
					</ee:transform>
				</when>
				<otherwise>
					<!-- <logger level="INFO" doc:name="Logger" doc:id="dfe09751-a567-4ff5-9ebf-08ba4814fdd3" message="Create Existing client : #[payload]"/> -->
					
					<ee:transform doc:name="New Relation Initialize Transform Message" doc:id="625f7597-7eee-4169-ae4d-24453fffdac2" >
						<ee:variables >
							<ee:set-variable variableName="currentRelatedObjectID" ><![CDATA[%dw 2.0
							output application/java
							---
							payload
							]]></ee:set-variable>													
						</ee:variables>
					</ee:transform>
					
					<!-- <logger level="INFO" doc:name="Logger" doc:id="eccaf94e-5f48-4120-8b29-1274238bae68" message="uniqueRelatedExistingClientObjectIDList : #[vars.uniqueRelatedExistingClientObjectIDList]"/> --> 
					<ee:transform doc:name="New Relation Transform Message" doc:id="880103f7-754e-4b2a-a98b-784f834a328e" >			
						<ee:variables >
							<ee:set-variable variableName="existingClient" ><![CDATA[%dw 2.0
							output application/xml skipNullOn="everywhere"
							ns soap http://www.w3.org/2003/05/soap-envelope
							ns xsd http://AddPolicy/xsd
							
							fun validateExistingClient(relationObject) = 
										 if (
												(relationObject.@RelatedObjectID == vars.currentRelatedObjectID.RelatedObjectID )	
												and
												(relationObject.@id == vars.currentRelatedObjectID.id )	
												and
												(relationObject.RelatedObjectType.@tc == "6" )		
												and 
												(
												if (relationObject.RelationRoleCode.@tc == "8" or 
														relationObject.RelationRoleCode.@tc == "31" or 
														relationObject.RelationRoleCode.@tc == "34") 
															if (((vars.partyList.Party filter ( ($.party_id == relationObject.@RelatedObjectID) ) map ($.relation contains("37")))[0]))
																"true"
															else "false"
												 else "false"
											  )											   ) 						
											  
											"true" 
										else  "false"
							
											 
							---
							xmlDummyParent: {
							(vars.origPayload.TXLife.TXLifeRequest.OLifE.*Relation filter validateExistingClient($) map (relationObject, relationIndex) -> {								
								xsd#ExistingClient: {
									tempId : relationObject.@RelatedObjectID,
									xsd#ExistingName: {										
										xsd#RelationshipArray: {
											xsd#Relationship: if (relationObject.RelationRoleCode.@tc == "32") "i"
															  else if (relationObject.RelationRoleCode.@tc == "189") "i"
															  else if (relationObject.RelationRoleCode.@tc == "8") "o"
															  else if (relationObject.RelationRoleCode.@tc == "31") "p"
															  else if (relationObject.RelationRoleCode.@tc == "1") "s"
															  else if (relationObject.RelationRoleCode.@tc == "2") "c"
															  else if (relationObject.RelationRoleCode.@tc == "34") "b"
															  else if (relationObject.RelationRoleCode.@tc == "127") "m"
															  else if (relationObject.RelationRoleCode.@tc == "36") "r"
															  else null,
											xsd#Relationship: 	  if ((relationObject.RelationRoleCode.@tc == "1") and ((vars.partyList.Party filter ($.party_id == relationObject.@RelatedObjectID))[0].lifePart contains "5")) "i"
													  else if ((relationObject.RelationRoleCode.@tc == "2") and ((vars.partyList.Party filter ($.party_id == relationObject.@RelatedObjectID))[0].lifePart contains "3")) "i"
													  else null,			  
										},
										xsd#SituationCode: "02",
										(vars.origPayload.TXLife.TXLifeRequest.OLifE.*Party filter ($.@id == relationObject.@RelatedObjectID) map (partyObject, partyIndex) -> {
												xsd#ClientNumber: partyObject.Producer.CarrierAppointment.CompanyProducerID,											
												xsd#LastName : partyObject.Person.LastName,
												xsd#FirstName : "",
												xsd#SexCode : "N",
												xsd#SsiOrEmpNo : ""
											
										})	
									}		
									} 	
								} 	
								)}]]></ee:set-variable>
							</ee:variables>
					</ee:transform>
					<ee:transform doc:name="New Relation Initialize Transform Message" doc:id="9bffdf6c-bdb2-4dbc-918e-6b7548564642" >
						<ee:variables >
							<ee:set-variable variableName="uniqueRelatedExistingClientObjectIDList" ><![CDATA[%dw 2.0
							output application/java
							---
							if (vars.existingClient.xmlDummyParent == null) 
								vars.uniqueRelatedExistingClientObjectIDList 
							else
								flatten(vars.*uniqueRelatedExistingClientObjectIDList ++ [payload.RelatedObjectID])
							]]></ee:set-variable>													
						</ee:variables>
					</ee:transform>
					<ee:transform doc:name="Add Relation Transform Message" doc:id="0c478d26-9388-48d0-ad78-5630cf5f7af2" >
						<ee:variables >
							<ee:set-variable variableName="existingClientList" ><![CDATA[%dw 2.0
							output application/json
							---
							if (vars.existingClient.xmlDummyParent == null) 
								vars.existingClientList 
							else
								flatten(vars.*existingClientList ++ [vars.existingClient.xmlDummyParent])	
							]]></ee:set-variable>											
						</ee:variables>
						
					</ee:transform>
					
				</otherwise>
			</choice>			
		</foreach>
		<ee:transform doc:name="Response Transform Message" doc:id="23c8bf61-30d7-4323-a8ab-dfd10c5c58ca" >
			<ee:message >
				<ee:set-payload><![CDATA[%dw 2.0
output application/xml skipNullOn="elements"
import * from dw::core::Arrays
ns soap http://www.w3.org/2003/05/soap-envelope
//ns soap http://schemas.xmlsoap.org/soap/envelope/
ns xsd http://AddPolicy/xsd
var effDate = payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.EffDate as Date

var xyz = (payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.OLifEExtension.*Amendments map (abc, index) -> {
		(abc mapObject {
			data : $
		})
	})
	
var amenddata = if(payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.OLifEExtension.Amendments == null) []  else  xyz..*data divideBy 4 
					
fun validateNewWritingAgent(relationObject) = 
			 if (
					( (relationObject.RelationRoleCode.@tc == "37" ) or
					  (relationObject.RelationRoleCode.@tc == "52" ) )
					and
					(relationObject.RelatedObjectType.@tc == "6" )									
				)  "true" 
			else  "false"	
									
fun isRiderCoverageContainPlanName(planName) = lower(planName) match {
						case "child" -> true
						case "disability income" -> true
						case "long term care" -> true
						case "paid in full benefit" -> true
						case "term" -> true
						else -> false										
					}

fun validateRiderCoverage(riderCoverageObject) = 
			 if (
					(riderCoverageObject.IndicatorCode.@tc == "2" ) 
					and
					(isRiderCoverageContainPlanName(riderCoverageObject.PlanName)
					and
					(riderCoverageObject.CovOption.CovOptionStatus.@tc != "35")
					)									
				)  "true" 
			else  "false"
			
fun isCoverageBenefitContainProductCode(productCode) = productCode match {
						case "XD" -> true
						case "GI" -> true
						case "AD" -> true
						case "WP" -> true
						case "E1" -> true
						case "FT" -> true
						case "H1" -> true
						case "PA" -> true
						case "PB" -> true
						case "WC" -> true
						case "PD" -> true
						case "CM" -> true
						case "GR" -> true
						case "WG" -> true
						case "NL" -> true
						else -> false										
					}

fun validateCoverageBenefit(coverageBenefitObject) = 
			 if (
					(coverageBenefitObject.IndicatorCode.@tc == "2" ) 
					and
					(isCoverageBenefitContainProductCode(coverageBenefitObject.ProductCode))									
				)  "true" 
			else  "false"

fun displayCoverageBenefitArrayTag(payload) = if ( sizeOf ( (payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.Life.*Coverage filter validateCoverageBenefit($) default []) map $$ ) > 0) true else false
						
fun getNewWritingAgent_AgentNumber(payload, relatedObjectID) = 	payload.TXLife.TXLifeRequest.OLifE.*Party filter ($.@id == relatedObjectID) map $.Producer.CarrierAppointment.CompanyProducerID	

fun getIncrementChar(baseInt) = baseInt match {
									case 0 -> "A"
									case 1 -> "B"
									case 2 -> "C"
									case 3 -> "D"
									case 4 -> "E"
									case 5 -> "F"
									case 6 -> "G"
									case 7 -> "H"
									case 8 -> "I"
									case 9 -> "J"
									case 10 -> "K"
									case 11 -> "L"
									case 12 -> "M"
									case 13 -> "N"
									case 14 -> "O"
									case 15 -> "P"
									case 16 -> "Q"
									case 17 -> "R"
									case 18 -> "S"
									case 19 -> "T"
									case 20 -> "U"
									case 21 -> "V"
									case 22 -> "W"
									case 23 -> "X"
									case 24 -> "Y"		
									else -> "Z"
								}	
fun getInsuredIndex(relationIndex) = if(relationIndex == null) (
												null
											) else (
												if (relationIndex < 9) relationIndex+1 
												else getIncrementChar(relationIndex - 9)
											)	


fun getPrimaryInsured(newClientListPrimaryInsured) = getInsuredIndex((flatten(vars.newClientList map (value, index) -> (value.NewClient.NewName.RelationshipArray.*Relationship filter($ == "i") map (index))))[0])


var baseCoverage = payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.Life.*Coverage filter ($.IndicatorCode.@tc == "1")

fun hasJointInsured(coverage) = coverage.*LifeParticipant.LifeParticipantRoleCode.@tc default [] contains "6" 
				

fun getSecondInsured(coverage) = if (hasJointInsured(coverage) == true) getInsuredIndex(vars.indexOfPartyWithJointInsured) else null

var newClientListSize = sizeOf(vars.newClientList)  

fun getIssueAgeTempFix(LifeParticipant) = do {
	var Parties = payload.TXLife.TXLifeRequest.OLifE.*Party default []
	var Relations = payload.TXLife.TXLifeRequest.OLifE.*Relation default []
	fun getPartyRelationRoleCodes(Party) = (Relations filter (upper($.@RelatedObjectID) == upper(Party.@id))).RelationRoleCode.@tc default []
	var insuredParty = (payload.TXLife.TXLifeRequest.OLifE.*Party filter (getPartyRelationRoleCodes($) contains "32"))[0]
	var insuredBirthDate = if (insuredParty.Person.BirthDate != null) insuredParty.Person.BirthDate as Date else null
	var EffDate = if (payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.EffDate != null) payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.EffDate as Date else null
	var insuredAgeAtEffDate = if ((insuredBirthDate != null) and (EffDate != null)) EffDate.year - insuredBirthDate.year - (if ((EffDate.month < insuredBirthDate.month) or ((EffDate.month == insuredBirthDate.month) and (EffDate.day < insuredBirthDate.day))) 1 else 0) else null
	var insured65thBirthDate = if (insuredBirthDate != null) insuredBirthDate + |P65Y| else null
	---
	if ((lower(baseCoverage[0].PlanName) == "medicare supplement") and (insuredBirthDate != null) and (EffDate != null))
		if (
			(insuredAgeAtEffDate == 64) and
			(
				((insured65thBirthDate.year == EffDate.year) and (insuredBirthDate.month == EffDate.month)) or // If insured is 64 and 65th birthdate is same month as the effective date set IssueAge to 65
				(
					(
						((insured65thBirthDate.year == EffDate.year) and (insuredBirthDate.month == (EffDate.month + 1))) or // If insured is 64 and 65th birthdate is one month later than effective date check for the birthdate to be on the first of the month
						((insured65thBirthDate.year == (EffDate.year + 1)) and (insuredBirthDate.month == 1) and (EffDate.month == 12)) // Some logic here to account for when the year rolls over
					) and
					(insuredBirthDate.day == 1) // If insured is 64 and 65th birthdate is one month later than effective date, but the birthdate is on the first of that month set IssueAge to 65
				)
			)
		) 65
		else null
	else null
}

fun annualizePremium() = do {
	var PaymentModeTC = payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.PaymentMode.@tc
	---
	if (PaymentModeTC == "1") baseCoverage[0].ModalPremAmt
	else if (PaymentModeTC == "2") baseCoverage[0].ModalPremAmt * 2
	else if (PaymentModeTC == "3") baseCoverage[0].ModalPremAmt * 4
	else if (PaymentModeTC == "4") baseCoverage[0].ModalPremAmt * 12
	else baseCoverage[0].ModalPremAmt
}
---							

{
	soap#Envelope : {
		soap#Header : "",
		soap#Body : {
			xsd#DeleteAndReAddPolicyPolicyInputsGroup: {
				xsd#NewPolicyControl: {
					xsd#CompanyCode: "101",
					xsd#PolicyNumber: payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.PolNumber,
					xsd#ApplicationDate: payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.ApplicationInfo.SignedDate,
					xsd#IssueStateCode: payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.ApplicationInfo.ApplicationJurisdiction,
					xsd#AplOption: if(payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.FinancialActivity.FinActivityType.@tc == "301") "1" else null,
					xsd#PolicySource: if(payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.OLifEExtension.PolicySource == null) null else payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.OLifEExtension.PolicySource,
					xsd#ReinsuranceCode: if (payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.Life.Coverage.ReinsuranceInfo.CarrierCode == null) null else payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.Life.Coverage.ReinsuranceInfo.CarrierCode,
					// TrustAssignment value when tc= 1 Irrevocable and tc= 2 Revocable 
					xsd#SpecialRestrict:  if ((payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.Life.Coverage.OLifEExtension.TrustAssignment.@tc == "1") or (payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.Life.Coverage.OLifEExtension.TrustAssignment.@tc == "2")) "100" else null
				},				
				xsd#NewClientArray: {
				(vars.newClientList  map (newClientListValue, newClientListIndex) -> {			
					xsd#NewClient : {
						xsd#NewName: {
							xsd#NameNumber: if (newClientListIndex < 9) newClientListIndex+1 else getIncrementChar(newClientListIndex - 9),
							xsd#RelationshipArray : {
								xsd#Relationship : newClientListValue.NewClient.NewName.RelationshipArray[0] default "",
								xsd#Relationship : newClientListValue.NewClient.NewName.RelationshipArray[1] default "",
								xsd#Relationship : newClientListValue.NewClient.NewName.RelationshipArray[2] default "",
								xsd#Relationship : newClientListValue.NewClient.NewName.RelationshipArray[3] default "",
								xsd#Relationship : newClientListValue.NewClient.NewName.RelationshipArray[4] default "",
								xsd#Relationship : newClientListValue.NewClient.NewName.RelationshipArray[5] default "",
								xsd#Relationship : newClientListValue.NewClient.NewName.RelationshipArray[6] default "",
								xsd#Relationship : newClientListValue.NewClient.NewName.RelationshipArray[7] default ""							
							},
							xsd#SituationCode: newClientListValue.NewClient.NewName.SituationCode default "",
							xsd#ClientNumber: newClientListValue.NewClient.NewName.ClientNumber default "",
							xsd#PolicyName: {																		
								xsd#SexCode: newClientListValue.NewClient.NewName.PolicyName.SexCode default "",
								xsd#LastName: newClientListValue.NewClient.NewName.PolicyName.LastName default null,
								xsd#FirstName: newClientListValue.NewClient.NewName.PolicyName.FirstName default "",
								xsd#MiddleName: newClientListValue.NewClient.NewName.PolicyName.MiddleName default null,
								xsd#NamePrefix: newClientListValue.NewClient.NewName.PolicyName.NamePrefix default null,
								xsd#NameSuffix: newClientListValue.NewClient.NewName.PolicyName.NameSuffix default null,
								xsd#Birthdate: newClientListValue.NewClient.NewName.PolicyName.Birthdate default "",
								xsd#SsiOrEmpNo: newClientListValue.NewClient.NewName.PolicyName.SsiOrEmpNo default "",
								xsd#BirthPlace: newClientListValue.NewClient.NewName.PolicyName.BirthPlace default null,
								xsd#MaritalStatus: newClientListValue.NewClient.NewName.PolicyName.MarStat default null,
								xsd#AliasIndicator: "Y",
								xsd#Nickname: newClientListValue.NewClient.NewName.PolicyName.Nickname default null
							}												
						},
						xsd#NewAddressArray: newClientListValue.NewClient.NewAddressArray mapObject (newClientListAddressValue, newClientListAddressIndex) -> {
							xsd#NewAddress: {													
								xsd#AddressType: newClientListAddressValue.AddressType,
								xsd#AddressLinesArray: {
									xsd#AddressLines : if (newClientListAddressValue.AddressLinesArray[1] !=null) (newClientListAddressValue.AddressLinesArray[1]) else (newClientListAddressValue.AddressLinesArray[0]) default "",
									xsd#AddressLines : if (newClientListAddressValue.AddressLinesArray[1] !=null) (newClientListAddressValue.AddressLinesArray[0]) else "",
									xsd#AddressLines : newClientListAddressValue.AddressLinesArray[2] default "",
									xsd#AddressLines : newClientListAddressValue.AddressLinesArray[3] default "",
								},
								xsd#City: newClientListAddressValue.City default null,
								xsd#State: newClientListAddressValue.State default null,
								xsd#ZipCode: newClientListAddressValue.ZipCode default null,												
								xsd#PhoneNumber: newClientListAddressValue.PhoneNumber default null												
							}
						},
						(xsd#NewBilling: { 
							xsd#BillingForm: newClientListValue.NewClient.NewBilling.BillingForm default null, 
							xsd#BillingMode: newClientListValue.NewClient.NewBilling.BillingMode default null,
							xsd#DueDay: newClientListValue.NewClient.NewBilling.DueDay default null,
							xsd#UseCode: newClientListValue.NewClient.NewBilling.UseCode default null,
							xsd#BaBranch: newClientListValue.NewClient.NewBilling.BaBranch default "",
							xsd#AccountType: newClientListValue.NewClient.NewBilling.AccountType default "",
							xsd#AccountNumber: newClientListValue.NewClient.NewBilling.AccountNumber default "",
							xsd#SignatureLineArray: {
								xsd#SignatureLine: newClientListValue.NewClient.NewBilling.SignatureLineArray[0] default "",
								xsd#SignatureLine: newClientListValue.NewClient.NewBilling.SignatureLineArray[1] default "",
								xsd#SignatureLine: newClientListValue.NewClient.NewBilling.SignatureLineArray[2] default "",
							}
						}) if (newClientListValue.NewClient.NewBilling !=null) 
					}
				})},
				xsd#ExistingClientArray: {								
					(vars.existingClientList  map (existingClientListValue, existingClientListIndex) -> {			
						xsd#ExistingClient : {
							xsd#ExistingName: {
								xsd#NameNumber: if ( (newClientListSize + existingClientListIndex) < 9) (newClientListSize + existingClientListIndex + 1) else getIncrementChar(newClientListSize + existingClientListIndex - 9),
								xsd#RelationshipArray : {
									xsd#Relationship : existingClientListValue.ExistingClient.ExistingName.RelationshipArray[0] default "",
									xsd#Relationship : existingClientListValue.ExistingClient.ExistingName.RelationshipArray[1] default "",
									xsd#Relationship : existingClientListValue.ExistingClient.ExistingName.RelationshipArray[2] default "",
									xsd#Relationship : existingClientListValue.ExistingClient.ExistingName.RelationshipArray[3] default "",
									xsd#Relationship : existingClientListValue.ExistingClient.ExistingName.RelationshipArray[4] default "",
									xsd#Relationship : existingClientListValue.ExistingClient.ExistingName.RelationshipArray[5] default "",
									xsd#Relationship : existingClientListValue.ExistingClient.ExistingName.RelationshipArray[6] default "",
									xsd#Relationship : existingClientListValue.ExistingClient.ExistingName.RelationshipArray[7] default ""							
								},
								xsd#SituationCode: existingClientListValue.ExistingClient.ExistingName.SituationCode default "",
								xsd#ClientNumber: existingClientListValue.ExistingClient.ExistingName.ClientNumber default "",
								xsd#LastName : existingClientListValue.ExistingClient.ExistingName.LastName default "",
								xsd#FirstName : existingClientListValue.ExistingClient.ExistingName.FirstName default "",
								xsd#SexCode : existingClientListValue.ExistingClient.ExistingName.SexCode default "",
								xsd#SsiOrEmpNo : existingClientListValue.ExistingClient.ExistingName.SsiOrEmpNo default ""
							}
						}	
					})			
				},			
				xsd#BaseCoverage: {
					xsd#NewBaseCoverage: {
						(payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.Life.*Coverage filter ($.IndicatorCode.@tc == "1") map {
							  xsd#ShortName: $.ShortName
						}),
						xsd#PrimaryInsured: getPrimaryInsured(vars.newClientList),
						xsd#SecondInsured:	getSecondInsured(baseCoverage),
						(payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.Life.*Coverage filter ($.IndicatorCode.@tc == "1") map {
							  ($.*LifeParticipant filter ($.LifeParticipantRoleCode.@tc == "1") map {
							  	xsd#IssueAge: getIssueAgeTempFix($)
							  })
						}),
						xsd#IssueDate: payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.EffDate,
						xsd#NonForfeitureOpt: "0",
						(
						payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.Life.*Coverage filter ((lower($.PlanName) != lower("Medicare Supplement")) and (lower($.PlanName) != lower("Pathway Annuity")) and (lower($.PlanName) != lower("Disability Income")) and ($.IndicatorCode.@tc == "1")) map {
							  xsd#NumberOfUnits: (payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.Life.FaceAmt/1000) as String {format : "#0.000000"}
						}	
						),
						(payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.Life.*Coverage filter ((lower($.PlanName) == lower("Medicare Supplement")) or (lower($.PlanName) == lower("Pathway Annuity"))) map {
							  xsd#NumberOfUnits: 1.000000
						}	
						),
						
						
						xsd#CommissionGroup: "1"			
					},									
					(payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.Life.*Coverage filter ($.IndicatorCode.@tc == "1") map {
						(xsd#NewCoverageProcessing: {
							  xsd#SelectPlanPrem: if (lower($.PlanName) == lower("Pathway Annuity")) payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.Life.FaceAmt else annualizePremium()
						}) if ((lower($.PlanName) == lower("Pathway Annuity")) or ($.ModalPremAmt != null))
					}),									
					(payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.Life.*Coverage filter ($.IndicatorCode.@tc == "1") map {
						(xsd#NewCoverageSpecialAllocation: {
							  xsd#DeathBenOption : if( $.DeathBenefitOptType.@tc == "2" ) $.DeathBenefitOptType.@tc else null default null,
							  xsd#SpecifiedAmount: if(lower($.PlanName) == lower("Medicare Supplement")) 1 else if (lower($.PlanName) != lower("Medicare Supplement") and $.IndicatorCode.@tc == "1") payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.Life.FaceAmt/1000 else null
						}) if ( $.DeathBenefitOptType.@tc != null and (not $.DeathBenefitOptType.@tc == "1") )
					}),
					(payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.Life.*Coverage filter ( $.IndicatorCode.@tc == "1" and lower($.PlanName) == lower("Medicare Supplement")) map {
						 xsd#NewCoverageHealth: {
							xsd#Var3Value: if (((payload.TXLife.TXLifeRequest.OLifE.*FormInstance default []) filter (
								(lower($.@id) == "forminstance_household") and
								(lower($.FormResponse.QuestionNumber) == "residedsameaddressind") and
								(lower($.FormResponse.ResponseData) == "yes")
							)) != []) "HH" else null,
							xsd#SmokerCode: if ( $.LifeParticipant.SmokerStat.@tc == "1" ) "N"
											else if ( $.LifeParticipant.SmokerStat.@tc == "2" ) "N"
											else if ( $.LifeParticipant.SmokerStat.@tc == "3" ) "Y"
											else null,
						}
					}),
					(xsd#CoverageBenefitArray: {
						(payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.Life.*Coverage filter validateCoverageBenefit($) map (coverage, coverageBenefitIndex) -> {								
							xsd#CoverageBenefit: {
								xsd#PlanCodeSubType: coverage.ProductCode,
								xsd#PrimaryInsured: getPrimaryInsured(vars.newClientList),
								(payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.Life.*Coverage filter ($.IndicatorCode.@tc == "1") map {
							  		($.*LifeParticipant filter ($.LifeParticipantRoleCode.@tc == "1") map {
							  	xsd#IssueAge: getIssueAgeTempFix($)
							  })
						}),
								//xsd#NumberOfUnits: coverageBenefitObject.CurrentAmt
								xsd#NumberOfUnits : if(lower(coverage.PlanName) == lower("Medicare Supplement")) 1.000000 else if (lower(coverage.PlanName) == lower("Disability Income")) (coverage.CurrentAmt / 100) as String {format : "#0.000000"} 
											else if ((lower(coverage.PlanName) != lower("Medicare Supplement") and lower(coverage.PlanName) != lower("Disability Income")) and (coverage.IndicatorCode.@tc == "1")) (payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.Life.FaceAmt/1000) as String {format : "#0.000000"}
											else if ((lower(coverage.PlanName) != lower("Medicare Supplement") and lower(coverage.PlanName) != lower("Disability Income")) and (coverage.IndicatorCode.@tc == "2")) (coverage.CurrentAmt / 1000) as String {format : "#0.000000"} else null
							}	
						})
					}) if displayCoverageBenefitArrayTag(payload),

				(payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.Life.*Coverage map (coverage, indexCoverage) -> {
				 		
				 			(coverage.*LifeParticipant  filter ($.LifeParticipantRoleCode.@tc == "1" and coverage.IndicatorCode.@tc == "1" and ((($.PermFlatExtraAmt default 0) as Number) > 0))  map (CoverageRating, indexCoverageRating) ->{
				 			xsd#CoverageRatingPFArray: {
				 			xsd#CoverageRatingPF : {
				 				xsd#PlanCodeSubType : "PF",
				 				xsd#PrimaryInsured :  1,
				 				//xsd#NumberOfUnits : payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.Life.FaceAmt,
				 				xsd#NumberOfUnits : if(lower(coverage.PlanName) == lower("Medicare Supplement")) 1.000000
								else if ((lower(coverage.PlanName) != lower("Medicare Supplement") ) and (coverage.IndicatorCode.@tc == "1")) (payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.Life.FaceAmt/1000) as String {format : "#0.000000"} else null,
				 				xsd#RatingReasonCode : payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.OLifEExtension.UnderwritingCaseDecisions.UWDecision[0],
				 				// xsd#RatingReasonCode: {(payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.OLifEExtension.UnderwritingCaseDecisions.*UWDecision) map (description,indexDescription ) ->{
				 					//description[0].Description
				 				//}}
				 				xsd#RatingPremiumPerUnit : {
										xsd#PremPerUnit : CoverageRating.PermFlatExtraAmt		 					
				 				}

				 			
				 			}}
				 		})
				 	}),																	
					
				 		(payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.Life.*Coverage map (coverage, indexCoverage) -> {
				 		
				 			(coverage.*LifeParticipant  filter ($.LifeParticipantRoleCode.@tc == "1" and coverage.IndicatorCode.@tc == "1" and ((($.TempFlatExtraAmt default 0) as Number) > 0))  map (CoverageRating, indexCoverageRating) -> using (date = CoverageRating.TempFlatExtraDuration default "0"){
				 			xsd#CoverageRatingTFArray: {
				 			xsd#CoverageRatingTF : {
				 				xsd#PlanCodeSubType : "TF",
				 				xsd#PrimaryInsured :  1,
				 				xsd#MatureExpireDate : effDate + ("P$(date)Y"),
				 				xsd#NumberOfUnits : if(lower(coverage.PlanName) == lower("Medicare Supplement")) 1.000000
								else if ((lower(coverage.PlanName) != lower("Medicare Supplement") ) and (coverage.IndicatorCode.@tc == "1")) (payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.Life.FaceAmt/1000) as String {format : "#0.000000"} else null,
				 				xsd#RatingReasonCode : payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.OLifEExtension.UnderwritingCaseDecisions.UWDecision[0],
				 				// xsd#RatingReasonCode: {(payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.OLifEExtension.UnderwritingCaseDecisions.*UWDecision) map (description,indexDescription ) ->{
				 					//description[0].Description
				 				//}}
				 				xsd#RatingPremiumPerUnit : {
										xsd#PremPerUnit : CoverageRating.TempFlatExtraAmt		 					
				 				}

				 			
				 			}}
				 		})
				 	}),		
			  		
			  		
				 		(payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.Life.*Coverage map (coverage, indexCoverage) -> {
				 		
				 			(coverage.*LifeParticipant  filter ($.PermTableRating != null and (($.PermTableRating default "0") != "0"))  map (CoverageRating, indexCoverageRating) ->{
				 			xsd#CoverageRatingPTArray: {
				 			xsd#CoverageRatingPT : {
				 				xsd#PlanCodeSubType : "PT",
				 				xsd#PrimaryInsured :  1,
				 				//xsd#NumberOfUnits : payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.Life.FaceAmt,
				 				xsd#NumberOfUnits : if(lower(coverage.PlanName) == lower("Medicare Supplement")) 1.000000 else if (lower(coverage.PlanName) == lower("Disability Income")) (coverage.CurrentAmt / 100) as String {format : "#0.000000"}
												else if ((lower(coverage.PlanName) != lower("Medicare Supplement") and lower(coverage.PlanName) != lower("Disability Income")) and (coverage.IndicatorCode.@tc == "1")) (payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.Life.FaceAmt/1000) as String {format : "#0.000000"}
												else if ((lower(coverage.PlanName) != lower("Medicare Supplement") and lower(coverage.PlanName) != lower("Disability Income")) and (coverage.IndicatorCode.@tc == "2")) (coverage.CurrentAmt / 1000) as String {format : "#0.000000"} else null,
				 				xsd#TableCode: CoverageRating.PermTableRating,
				 				xsd#RatingReasonCode: payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.OLifEExtension.UnderwritingCaseDecisions.UWDecision[0]
				 				// xsd#RatingReasonCode: {(payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.OLifEExtension.UnderwritingCaseDecisions.*UWDecision) map (description,indexDescription ) ->{
				 					//description[0].Description
				 				//}}
				 			
				 			}}
				 		})
				 	})},
					
					(xsd#NewCoverageRequirementsArray: {
						xsd#NewCoverageRequirements : {
							xsd#RequirementsCode : payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.RequirementInfo.RequirementValue,
							xsd#StatusCode : 1,
							xsd#RequirementsType : 1,
							xsd#CommentsField : "\$" ++ payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.ApplicationInfo.PremBalDue
							
						}
					})if ( payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.ApplicationInfo.PremBalDue != null 
						and payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.ApplicationInfo.PremBalDue > 0 
						and lower(payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.RequirementInfo.RequirementValue) == lower("BALDUE")
						and payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.RequirementInfo.ReqStatus != null 
						and (payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.RequirementInfo.ReqStatus.@tc == "1"
						or payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.RequirementInfo.ReqStatus.@tc == "23") ),

				xsd#RiderCoverageArray: {
					(payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.Life.*Coverage filter validateRiderCoverage($) map (riderCoverageObject, riderCoverageIndex) -> {								
						xsd#RiderCoverage: {		
							xsd#NewRiderCoverage: {
								xsd#CoverageNumber: getIncrementChar(riderCoverageIndex + 1),
								xsd#ShortName: riderCoverageObject.ShortName,
								xsd#PrimaryInsured: getPrimaryInsured(vars.newClientList),
								xsd#SecondInsured:	getSecondInsured(riderCoverageObject),
								(payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.Life.*Coverage filter ($.IndicatorCode.@tc == "1") map {
									  ($.*LifeParticipant filter ($.LifeParticipantRoleCode.@tc == "1") map {
									  	xsd#IssueAge: getIssueAgeTempFix($)
									  })
								}),
								xsd#IssueDate: payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.EffDate,
								xsd#NonForfeitureOpt: "0",
								xsd#NumberOfUnits: if(lower(riderCoverageObject.PlanName) == lower("Medicare Supplement")) 1 else if (lower(riderCoverageObject.PlanName) == lower("Disability Income")) (riderCoverageObject.CurrentAmt / 100) as String {format : "#0.000000"}
											else if ((lower(riderCoverageObject.PlanName) != lower("Medicare Supplement") and lower(riderCoverageObject.PlanName) != lower("Disability Income")) and (riderCoverageObject.IndicatorCode.@tc == "1")) (payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.Life.FaceAmt/1000) as String {format : "#0.000000"}
											else if ((lower(riderCoverageObject.PlanName) != lower("Medicare Supplement") and lower(riderCoverageObject.PlanName) != lower("Disability Income")) and (riderCoverageObject.IndicatorCode.@tc == "2")) (riderCoverageObject.CurrentAmt / 1000) as String {format : "#0.000000"} else null,
								xsd#CommissionGroup: "1"
							},
							(xsd#CoverageRatingPFArray: {
								xsd#CoverageRatingPF: {
									xsd#PlanCodeSubType: "PF",
									xsd#PrimaryInsured: 1,
									xsd#NumberOfUnits:
										if (lower(riderCoverageObject.PlanName) == "disability income") (riderCoverageObject.CurrentAmt / 100) as String {format : "#0.000000"}
										else if (lower(riderCoverageObject.PlanName) != "disability income") (riderCoverageObject.CurrentAmt / 1000) as String {format : "#0.000000"}
										else null,
									xsd#RatingReasonCode: payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.OLifEExtension.UnderwritingCaseDecisions.UWDecision.Description,
									xsd#RatingPremiumPerUnit: {
										xsd#PremPerUnit: (baseCoverage[0].*LifeParticipant filter ($.LifeParticipantRoleCode.@tc contains "1"))[0].PermFlatExtraAmt
									}
								}
							}) if (
								(
									((lower(baseCoverage[0].PlanName) == "universal life accumulator") and (lower (riderCoverageObject.PlanName) == "term")) or
									((lower(baseCoverage[0].PlanName) == "transitional life") and (lower (riderCoverageObject.PlanName) == "paid in full benefit"))
								) and
								(riderCoverageObject.*LifeParticipant.LifeParticipantRoleCode.@tc contains "1") and
								((((baseCoverage[0].*LifeParticipant filter ($.LifeParticipantRoleCode.@tc contains "1"))[0].PermFlatExtraAmt default 0) as Number) > 0)
							),
							(xsd#CoverageRatingTFArray: {
								xsd#CoverageRatingTF: {
									xsd#PlanCodeSubType: "TF",
									xsd#PrimaryInsured: 1,
									xsd#MatureExpireDate: using (years = (baseCoverage[0].*LifeParticipant filter ($.LifeParticipantRoleCode.@tc contains "1"))[0].TempFlatExtraDuration default "0") effDate + ("P$(years)Y"),
									xsd#NumberOfUnits:
										if (lower(riderCoverageObject.PlanName) == "disability income") (riderCoverageObject.CurrentAmt / 100) as String {format : "#0.000000"}
										else if (lower(riderCoverageObject.PlanName) != "disability income") (riderCoverageObject.CurrentAmt / 1000) as String {format : "#0.000000"}
										else null,
									xsd#RatingReasonCode: payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.OLifEExtension.UnderwritingCaseDecisions.UWDecision.Description,
									xsd#RatingPremiumPerUnit: {
										xsd#PremPerUnit: (baseCoverage[0].*LifeParticipant filter ($.LifeParticipantRoleCode.@tc contains "1"))[0].TempFlatExtraAmt
									}
								}
							}) if (
								(
									((lower(baseCoverage[0].PlanName) == "universal life accumulator") and (lower (riderCoverageObject.PlanName) == "term")) or
									((lower(baseCoverage[0].PlanName) == "transitional life") and (lower (riderCoverageObject.PlanName) == "paid in full benefit"))
								) and
								(riderCoverageObject.*LifeParticipant.LifeParticipantRoleCode.@tc contains "1") and
								((((baseCoverage[0].*LifeParticipant filter ($.LifeParticipantRoleCode.@tc contains "1"))[0].TempFlatExtraAmt default 0) as Number) > 0)
							),
							(xsd#CoverageRatingPTArray: {
								xsd#CoverageRatingPT: {
									xsd#PlanCodeSubType: "PT",
									xsd#PrimaryInsured: 1,
									xsd#NumberOfUnits:
										if (lower(riderCoverageObject.PlanName) == "disability income") (riderCoverageObject.CurrentAmt / 100) as String {format : "#0.000000"}
										else if (lower(riderCoverageObject.PlanName) != "disability income") (riderCoverageObject.CurrentAmt / 1000) as String {format : "#0.000000"}
										else null,
									xsd#TableCode: (baseCoverage[0].*LifeParticipant filter ($.LifeParticipantRoleCode.@tc contains "1"))[0].PermTableRating,
									xsd#RatingReasonCode: payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.OLifEExtension.UnderwritingCaseDecisions.UWDecision.Description
								}
							}) if (
								(
									((lower(baseCoverage[0].PlanName) == "universal life accumulator") and (lower (riderCoverageObject.PlanName) == "term")) or
									((lower(baseCoverage[0].PlanName) == "transitional life") and (lower (riderCoverageObject.PlanName) == "paid in full benefit"))
								) and
								(riderCoverageObject.*LifeParticipant.LifeParticipantRoleCode.@tc contains "1") and
								(((baseCoverage[0].*LifeParticipant filter ($.LifeParticipantRoleCode.@tc contains "1"))[0].PermTableRating default "0") != "0")
							),
							(payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.Life.*Coverage filter ( lower(riderCoverageObject.PlanName) == lower("Disability Income") and  $.IndicatorCode.@tc == "1" and lower($.PlanName) == lower("Mortgage Protection")) map {
								 xsd#NewCoverageHealth: {
									xsd#Var2Value: if ( riderCoverageObject.EliminationPeriod.@tc == "9" ) "90DY"
													else if ( riderCoverageObject.EliminationPeriod.@tc == "4" ) "30DY"
													else null,
									xsd#SmokerCode: if ( riderCoverageObject.LifeParticipant.SmokerStat.@tc == "1" ) "N"
													else if ( riderCoverageObject.LifeParticipant.SmokerStat.@tc == "2" ) "N"
													else if ( riderCoverageObject.LifeParticipant.SmokerStat.@tc == "3" ) "Y"
													else null,
								}
							}),
							
								
						}
					})									
				},
				xsd#RemarkDataArray: {	
					(payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.Life.*Coverage filter ( lower($.PlanName) == lower("Medicare Supplement")) map {																	
						(xsd#RemarkData: {
							xsd#RemarkNum: "40",
							xsd#RemarksArea: "PX"
						}) if($.OLifEExtension.MedSuppIndicators.WaivePreEx.@tc == "1"),
						(xsd#RemarkData: {
							xsd#RemarkNum: "31",
							xsd#RemarksArea: "Guaranteed Issue"
						}) if($.OLifEExtension.MedSuppIndicators.GuaranteedIssue.@tc == "1"),
						(xsd#RemarkData: {
							xsd#RemarkNum: "32",
							xsd#RemarksArea: "Open Enrollment"
						}) if($.OLifEExtension.MedSuppIndicators.OpenEnrollment.@tc == "1"),
						(xsd#RemarkData: {
							xsd#RemarkNum: "33",
							xsd#RemarksArea: "Contestable"
						}) if($.OLifEExtension.MedSuppIndicators.ContestabilityPeriod.@tc == "1")
					}) 																		
				},
				xsd#RequiredNotificationDataArray: {	
					(payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.Life.*Coverage filter ( $.IndicatorCode.@tc == "1" and $.ReinsuranceInfo.CarrierCode == "2"
						and ( lower($.PlanName) == lower("Preferred Whole Life") or lower($.PlanName) == lower("Level Term") or lower($.PlanName) == lower("Universal Life Accumulator"))) map {																	
						xsd#RequiredNotificationData: {
							xsd#NotificationCode: "REI00",
							xsd#CoverageNumber: "A",
							xsd#SubCoverageNum: "AA",
							xsd#NotifyDate: if(lower($.PlanName) == lower("Preferred Whole Life") or lower($.PlanName) == lower("Level Term"))
												( (payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.EffDate[0 to 3] + 10) ++ "-" ++ ( (payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.EffDate[5 to 6] - 1) as String {format : "00"} ) ++ "-" ++ payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.EffDate[8 to 9])
											else if(lower($.PlanName) == lower("Universal Life Accumulator") )
												( (payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.EffDate[0 to 3] + 3) ++ "-" ++ ( (payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.EffDate[5 to 6] - 1) as String {format : "00"} ) ++ "-" ++ payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.EffDate[8 to 9])
											else null,					
							xsd#CommentsField: "REINSURANCE"
						}
					}) 																		
				},
				
					(xsd#CorrespondenceArray: {
						xsd#Correspondence: {
							xsd#NewPolicyCorrespondence : {
								xsd#NotificationCode: "AMEND",
								xsd#PersonCode : "",
								xsd#CommentsField : ""
                       
							},				
							
							xsd#ModificationTextArray :  {	
								 (amenddata map (amendmentDetailArray, index) ->											
								xsd#ModificationText:   {
									xsd#ModifyTextCode: "999",
										xsd#VariableDataArray: {
												(if(sizeOf(amendmentDetailArray) == 4)(amendmentDetailArray map {
													xsd#VariableData :  $
												}) else ({
													xsd#VariableData : amendmentDetailArray[0] default "",
													xsd#VariableData : amendmentDetailArray[1] default "",
													xsd#VariableData : amendmentDetailArray[2] default "",
													xsd#VariableData : amendmentDetailArray[3] default "",
												}))
										}												
								} ),
								}}}) if(sizeOf(amenddata) > 0),			
						
				xsd#AddPolicyStatus:{
					xsd#StatusCode:if(payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.PolicyStatus.@tc == "23")"INCP" 
								else if(payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.PolicyStatus.@tc == "35")"REJD"
				                else if(payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.PolicyStatus.@tc == "25")"ISSU"   
				                else if(payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.PolicyStatus.@tc == "7")"NOTT"   
				                else if(payload.TXLife.TXLifeRequest.OLifE.Holding.Policy.PolicyStatus.@tc == "62")"POST"   
				                else null
				                },
				xsd#NewWritingAgentArray: {
					(payload.TXLife.TXLifeRequest.OLifE.*Relation  filter validateNewWritingAgent($) map (relationObject, relationIndex) -> {								
						xsd#NewWritingAgent: {
							xsd#CommissionGroup: "1",
							xsd#CommSubGroup: getIncrementChar(relationIndex),
							xsd#AgentNumber: getNewWritingAgent_AgentNumber(payload, relationObject.@RelatedObjectID),
							xsd#SituationCode: "01",
							xsd#PercentOfCommiss: relationObject.InterestPercent,
							xsd#PercentOfProduct: relationObject.InterestPercent
						}	
					})								
				}
				 
			}
		} 
	
	
	}
	
	}
]]></ee:set-payload>
			</ee:message>
		</ee:transform>  


										 				                            
 <logger level="INFO" doc:name="End of policies-mapACORD103ToLIDPPolicy-papi" doc:id="1606d2f3-7952-45e8-ae4a-d0d554aeccaf" 
		category="com.pekininsurance-policies-mapACORD103ToLIDPPolicy-papi-impl" 
		message='End the policies-mapACORD103ToLIDPPolicy-papi : #[import maskSensitiveDataXML from masking output application/xml --- maskSensitiveDataXML(payload, ["SsiOrEmpNo"])]' />
		<error-handler >
			<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="3fe43890-5836-4d85-a8a1-077cc13037a5" >
				<ee:transform doc:name="Transform Message" doc:id="660c7b1b-abfa-47a5-8ce3-c00b62d05235" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
    Errors: [
        {
            "errorMessage": "Internal Server Error",
            detail: error.exception.cause.detailMessage,
            
        }
    ]
}]]></ee:set-payload>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="httpStatus" ><![CDATA[500]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
			</on-error-continue>
		</error-handler>
                            

              </flow>
</mule>
             